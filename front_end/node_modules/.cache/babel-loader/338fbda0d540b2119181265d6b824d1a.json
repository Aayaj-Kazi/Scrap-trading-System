{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:9090';\nconst LOGIN_URL = \"http://localhost:9090/api/user/login\";\nexport const USER_NAME_SESSION_ATTRIBUTE_NAME = 'authenticatedUser';\n\nclass AuthenticationService {\n  processLoginForm(username, password) {\n    console.log(username + \" \" + password);\n    var us = \"?username=\" + username + \"&password=\" + password; //return axios.post(`${API_URL}/api/user/login`,{username, password});\n\n    return axios.post(LOGIN_URL + us); //return axios.post(LOGIN_URL,{username:\"username\",password:\"password\"});\n    //{ headers: { authorization: this.createBasicAuthToken(username, password) } })\n  }\n\n  executeBasicAuthenticationService(username, password) {\n    return axios.get(LOGIN_URL, {\n      headers: {\n        authorization: this.createBasicAuthToken(username, password)\n      }\n    });\n  }\n\n  executeJwtAuthenticationService(username, password) {\n    console.log(username);\n    return axios.post(`${API_URL}/authenticate`, {\n      username,\n      password\n    });\n  }\n\n  createBasicAuthToken(username, password) {\n    return 'Basic ' + window.btoa(username + \":\" + password);\n  }\n\n  registerSuccessfulLogin(username, password) {\n    //let basicAuthHeader = 'Basic ' +  window.btoa(username + \":\" + password)\n    //console.log('registerSuccessfulLogin')\n    sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username);\n    this.setupAxiosInterceptors(this.createBasicAuthToken(username, password));\n  }\n\n  registerSuccessfulLoginForJwt(username, token) {\n    sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username);\n    this.setupAxiosInterceptors(this.createJWTToken(token));\n  }\n\n  createJWTToken(token) {\n    return 'Bearer ' + token;\n  }\n\n  logout() {\n    sessionStorage.removeItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n  }\n\n  isUserLoggedIn() {\n    let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n    if (user === null) return false;\n    return true;\n  }\n\n  getLoggedInUserName() {\n    let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n    if (user === null) return '';\n    return user;\n  }\n\n  setupAxiosInterceptors(token) {\n    axios.interceptors.request.use(config => {\n      if (this.isUserLoggedIn()) {\n        config.headers.authorization = token;\n      }\n\n      return config;\n    });\n  }\n\n}\n\nexport default new AuthenticationService();","map":{"version":3,"sources":["G:/project_main/Scrap-trading-System/front_end/src/services/AuthenticationService.js"],"names":["axios","API_URL","LOGIN_URL","USER_NAME_SESSION_ATTRIBUTE_NAME","AuthenticationService","processLoginForm","username","password","console","log","us","post","executeBasicAuthenticationService","get","headers","authorization","createBasicAuthToken","executeJwtAuthenticationService","window","btoa","registerSuccessfulLogin","sessionStorage","setItem","setupAxiosInterceptors","registerSuccessfulLoginForJwt","token","createJWTToken","logout","removeItem","isUserLoggedIn","user","getItem","getLoggedInUserName","interceptors","request","use","config"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,MAAMC,OAAO,GAAG,uBAAhB;AACA,MAAMC,SAAS,GAAG,sCAAlB;AAEA,OAAO,MAAMC,gCAAgC,GAAG,mBAAzC;;AAEP,MAAMC,qBAAN,CAA4B;AAExBC,EAAAA,gBAAgB,CAACC,QAAD,EAAUC,QAAV,EAAmB;AAC/BC,IAAAA,OAAO,CAACC,GAAR,CAAYH,QAAQ,GAAC,GAAT,GAAaC,QAAzB;AACA,QAAIG,EAAE,GAAC,eAAaJ,QAAb,GAAsB,YAAtB,GAAmCC,QAA1C,CAF+B,CAG/B;;AACA,WAAOP,KAAK,CAACW,IAAN,CAAWT,SAAS,GAACQ,EAArB,CAAP,CAJ+B,CAK3B;AAEA;AAEP;;AAEDE,EAAAA,iCAAiC,CAACN,QAAD,EAAWC,QAAX,EAAqB;AAClD,WAAOP,KAAK,CAACa,GAAN,CAAUX,SAAV,EACH;AAAEY,MAAAA,OAAO,EAAE;AAAEC,QAAAA,aAAa,EAAE,KAAKC,oBAAL,CAA0BV,QAA1B,EAAoCC,QAApC;AAAjB;AAAX,KADG,CAAP;AAEH;;AAEDU,EAAAA,+BAA+B,CAACX,QAAD,EAAWC,QAAX,EAAqB;AAChDC,IAAAA,OAAO,CAACC,GAAR,CAAYH,QAAZ;AACA,WAAON,KAAK,CAACW,IAAN,CAAY,GAAEV,OAAQ,eAAtB,EAAsC;AACzCK,MAAAA,QADyC;AAEzCC,MAAAA;AAFyC,KAAtC,CAAP;AAIH;;AAEDS,EAAAA,oBAAoB,CAACV,QAAD,EAAWC,QAAX,EAAqB;AACrC,WAAO,WAAWW,MAAM,CAACC,IAAP,CAAYb,QAAQ,GAAG,GAAX,GAAiBC,QAA7B,CAAlB;AACH;;AAEDa,EAAAA,uBAAuB,CAACd,QAAD,EAAWC,QAAX,EAAqB;AACxC;AACA;AACAc,IAAAA,cAAc,CAACC,OAAf,CAAuBnB,gCAAvB,EAAyDG,QAAzD;AACA,SAAKiB,sBAAL,CAA4B,KAAKP,oBAAL,CAA0BV,QAA1B,EAAoCC,QAApC,CAA5B;AACH;;AAEDiB,EAAAA,6BAA6B,CAAClB,QAAD,EAAWmB,KAAX,EAAkB;AAC3CJ,IAAAA,cAAc,CAACC,OAAf,CAAuBnB,gCAAvB,EAAyDG,QAAzD;AACA,SAAKiB,sBAAL,CAA4B,KAAKG,cAAL,CAAoBD,KAApB,CAA5B;AACH;;AAEDC,EAAAA,cAAc,CAACD,KAAD,EAAQ;AAClB,WAAO,YAAYA,KAAnB;AACH;;AAGDE,EAAAA,MAAM,GAAG;AACLN,IAAAA,cAAc,CAACO,UAAf,CAA0BzB,gCAA1B;AACH;;AAED0B,EAAAA,cAAc,GAAG;AACb,QAAIC,IAAI,GAAGT,cAAc,CAACU,OAAf,CAAuB5B,gCAAvB,CAAX;AACA,QAAI2B,IAAI,KAAK,IAAb,EAAmB,OAAO,KAAP;AACnB,WAAO,IAAP;AACH;;AAEDE,EAAAA,mBAAmB,GAAG;AAClB,QAAIF,IAAI,GAAGT,cAAc,CAACU,OAAf,CAAuB5B,gCAAvB,CAAX;AACA,QAAI2B,IAAI,KAAK,IAAb,EAAmB,OAAO,EAAP;AACnB,WAAOA,IAAP;AACH;;AAEDP,EAAAA,sBAAsB,CAACE,KAAD,EAAQ;AAC1BzB,IAAAA,KAAK,CAACiC,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CACKC,MAAD,IAAY;AACR,UAAI,KAAKP,cAAL,EAAJ,EAA2B;AACvBO,QAAAA,MAAM,CAACtB,OAAP,CAAeC,aAAf,GAA+BU,KAA/B;AACH;;AACD,aAAOW,MAAP;AACH,KANL;AAQH;;AAxEuB;;AA2E5B,eAAe,IAAIhC,qBAAJ,EAAf","sourcesContent":["import axios from 'axios'\r\n\r\nconst API_URL = 'http://localhost:9090'\r\nconst LOGIN_URL = \"http://localhost:9090/api/user/login\";\r\n\r\nexport const USER_NAME_SESSION_ATTRIBUTE_NAME = 'authenticatedUser'\r\n\r\nclass AuthenticationService {\r\n\r\n    processLoginForm(username,password){\r\n        console.log(username+\" \"+password)\r\n        var us=\"?username=\"+username+\"&password=\"+password;\r\n        //return axios.post(`${API_URL}/api/user/login`,{username, password});\r\n        return axios.post(LOGIN_URL+us);\r\n            //return axios.post(LOGIN_URL,{username:\"username\",password:\"password\"});\r\n               \r\n            //{ headers: { authorization: this.createBasicAuthToken(username, password) } })\r\n    \r\n    }\r\n\r\n    executeBasicAuthenticationService(username, password) {\r\n        return axios.get(LOGIN_URL,\r\n            { headers: { authorization: this.createBasicAuthToken(username, password) } })\r\n    }\r\n\r\n    executeJwtAuthenticationService(username, password) {\r\n        console.log(username);\r\n        return axios.post(`${API_URL}/authenticate`, {\r\n            username,\r\n            password\r\n        })\r\n    }\r\n\r\n    createBasicAuthToken(username, password) {\r\n        return 'Basic ' + window.btoa(username + \":\" + password)\r\n    }\r\n\r\n    registerSuccessfulLogin(username, password) {\r\n        //let basicAuthHeader = 'Basic ' +  window.btoa(username + \":\" + password)\r\n        //console.log('registerSuccessfulLogin')\r\n        sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username)\r\n        this.setupAxiosInterceptors(this.createBasicAuthToken(username, password))\r\n    }\r\n\r\n    registerSuccessfulLoginForJwt(username, token) {\r\n        sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username)\r\n        this.setupAxiosInterceptors(this.createJWTToken(token))\r\n    }\r\n\r\n    createJWTToken(token) {\r\n        return 'Bearer ' + token\r\n    }\r\n\r\n\r\n    logout() {\r\n        sessionStorage.removeItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\r\n    }\r\n\r\n    isUserLoggedIn() {\r\n        let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME)\r\n        if (user === null) return false\r\n        return true\r\n    }\r\n\r\n    getLoggedInUserName() {\r\n        let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME)\r\n        if (user === null) return ''\r\n        return user\r\n    }\r\n\r\n    setupAxiosInterceptors(token) {\r\n        axios.interceptors.request.use(\r\n            (config) => {\r\n                if (this.isUserLoggedIn()) {\r\n                    config.headers.authorization = token\r\n                }\r\n                return config\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\nexport default new AuthenticationService()"]},"metadata":{},"sourceType":"module"}